#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//int main()
//{
//	char arr[] = "abcdef";
//	char*pc=&arr;
//	printf("%s\n",arr);
//	printf("%s\n", pc);
//
//	return 0;
//}
//int main()
//{
//	const char* p = "abcdef";//"abcdef"是一个常量字符串
//	//*p = 'w';//不能更改
//	printf("%s", p);
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	const char* p1 = "abcdef";
//	const char* p2 = "abcdef";
//	if (p1==p2)
//	{
//		printf("hehe");
//	}
//	else
//	{
//		printf("haha");
//	}
//	//if (arr1 ==arr2)
//	//{
//	//	printf("hehe");
//	//}
//	//else
//	//{
//	//	printf("haha");
//	//}
//	return 0;
//}
//指针数组 ,是数组，用来存放指针的
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//	int* parr[] = {arr1,arr2,arr3};
//	int i = 0;
//	for ( i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for ( j = 0; j < 5; j++)
//		{
//			printf("%d ", *(parr[i] + j));
//		}
//		printf("\n");
//	}
//	return 0;
//}
//数组指针--指针
//

//int main()
//{
//	//int* p=NULL;//整型指针--指向整型的指针-存放整型的地址
//	//char* pc = NULL;//pc是字符指针-只想字符的指针-可以存放字符的地址
//	////数组指针--指向数组的指针-存放数组的地址
//	//int arr[10] = { 0 };
//	//arr-首元素地址
//	//&arr[0]-首元素地址
//	//&arr -数组地址
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };
//	int(*p)[10] = &arr;//数组的地址要存起来
//	//上面的p就是数组指针
//	return 0;
//}
//参数是数组的形式	
//void print1(int arr[3][5], int x, int y)
//{
//	int i = 0;
//	int j = 0;
//	for ( i = 0; i < x; i++)
//	{
//		for (j = 0; j < y;j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//}
////参数是指针的形式
//void print2(int(*p)[5], int x, int y)
//{
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < x; i++)
//	{
//		for (j = 0; j < y; j++)
//		{
//			//printf("%d ", p[i][j]);
//			printf("%d ", ( * (p + i))[j]);
//		}
//		printf("\n");
//	}
//}
//int main()
//{
//	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7,} };
//	print1(arr, 3, 5);
//	print2(arr, 3, 5);
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int* p = arr;
//	for ( i = 0; i < 10; i++)
//	{
//		printf("%d", p[i]);
//		printf("%d", *(p+i));
//		printf("%d", *(arr+i));
//		printf("%d", arr[i]);//arr[i] == *(arr+i) == *(p+i) == p[i]
//
//	}
//	return 0;
//}
int Add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}
int main()
{
	int a = 10;
	int b = 10;
	//int arr[10] = { 0 };
	//int(*p)[10] = &arr;
	
	//arr;
	//printf("%d\n", Add(a, b));

	//&函数名 和  函数名  都是函数地址
	//printf("%p\n", &Add);
	//printf("%p\n", Add);

	int (*pa)(int, int) = Add;
	printf("%d\n", (*pa)(2, 3));//5
	return 0;
}
