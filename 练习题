#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<Windows.h>
#include<string.h>
#include<stdlib.h>
//打印素数

int main()
{
	int i = 0;
	int count = 0;
	for ( i = 100; i <= 200; i++)
	{
        //判断i是否为素数
        //素数判断的规则
		//1.试除法
		//产生2->i-1
		int j = 0;
		for ( j = 2; j < i; j++)
		{
			if (i % j == 0)
			{
				break;
			}
		}
		if (j==i)
		{
			count++;
			printf("%d ", i);
		}
	}
	printf("\ncount=%d\n", count);
	return 0;
}
//打印闰年
//int main()
//{
//	int year = 0;
//	int zh = 0;
//	for ( year = 1000; year <= 2000; year++)
//	{
//		//判断year是否为闰年
//		//1.能被4整除并且不能被100整除的是闰年
//		//2.能被400整除是闰年
//		/*if (year%4==0 && year%400!=0)
//		{
//			printf(" %d", year);
//			zh++;
//		}
//		else if(year%400==0)
//		{
//			printf(" %d", year);
//			zh++;
//		}*/
//		if (((year % 4 == 0 && year % 400 != 0)) || (year % 400 == 0))
//		{
//			printf(" %d", year);
//			zh++;
//		}
//	}
//	printf("总和%d", zh);
//	return 0;
//}
//求最大公因式
//int main()
//{
//	int m = 0;
//	int n = 0;
//	int r = 0;
//	scanf("%d%d", &m, &n);
//	while (r=m%n)
//	{
//		m = n;
//		n = r;
//	}
//	printf("%d\n", n);
//	return 0;
//}
//输出1-100 3的倍数的数
//int main()
//{
//	int i = 0;
//	for ( i = 1; i <= 100; i++)
//	{
//		if (i % 3 == 0)
//		printf("%d ", i);
//	}
//	return 0;
//}
//从大到小输出
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	scanf("%d%d%d", &a, &b, &c);
//	if (a<b)
//	{
//		int tmp = a;
//		a = b;
//		b = tmp;
//	}
//	if (a<c)
//	{
//		int tmp = a;
//		a = c;
//		c = tmp;
//	}
//	if (b<c)
//	{
//		int tmp = b;
//		b = c;
//		c = tmp;
//	}
//	printf("%d %d %d", a, b, c);
//	return 0;
//}


//练习5
//int main()
//{
//	int i = 0;
//	char password[20] = { 0 };
//	for ( i = 0; i < 3; i++)
//	{
//		printf("请输入密码");
//		scanf("%s", password);
//		if (strcmp(password,"123456")==0)//==不能比较两个字符串相等，应该使用一个库函数-strcmp
//		{
//			printf("登陆成功\n");
//			break;
//		}
//		else
//		{
//			printf("密码错误\n");
//		}
//	}
//	if (i == 3)
//		printf("三次密码均错误，退出程序\n");
//	return 0;
//}
//练习4
//int main()
//{
//	char arr1[] = "i love ddd";
//	char arr2[] = "##########";
//	int left = 0;
//	int right = strlen(arr1) - 1;
//	while (left<=right)
//	{
//		arr2[left] = arr1[left];
//		arr2[right] = arr1[right];
//		printf("%s\n", arr2);
//		//休息一秒
//		Sleep(1000);
//		system("cls");//执行系统命令的一个函数-cls-清屏
//		left++;
//		right--;
//	}
//	printf("%s\n", arr2);
//	return 0;
//}
// 练习3
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);//计算数组个数
//	int left = 0;//左下标
//	int right = sz - 1;//右下标
//	while (left<=right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] >k)
//		{
//			right = mid - 1;
//		}
//		else if(arr[mid]<k)
//		{
//			left = mid + 1;
//		}
//		else
//	     {
//			printf("找到了，下标是%d\n",mid);
//			break;
//	     }
//	}
//	if (left>right)
//	{
//		printf("找不到");
//	}
//	return 0;
//}

//练习2
//int main()
//{
//	int n = 0;
//	int ret = 1;
//	int sum = 0;
//	for ( n = 1; n <=10; n++)
//	{
//		ret = ret * n;
//		//n的阶乘
//		sum = sum + ret;
//	}
//	printf("%d\n",sum);
//	return 0;
//}
//
