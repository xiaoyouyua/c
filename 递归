#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//#include "add.h"
//int main()
//{
//	int a = 10;
//	int b = 12;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//}
//void print(int n)
//{
//	if (n>9)//123
//	{
//		print(n / 10);
//	}
//	printf("%d ",n%10);
//}
//int main()
//{
//	unsigned int num = 0;
//	scanf("%d", &num);
//	print(num);
//	return 0;
//}
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str !='\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//int my_strlen(char* str)
//{
//	if (*str !='\0')
//	{
//		return 1 + my_strlen(str + 1);
//	}
//	else
//	{
//
//	}
//	{
//		return 0;
//	}
//}
//int main()
//{
//	char arr[] = "dxy";
//	int len = my_strlen(arr);//arr是数组，数组传参，传过去的不是整个数组，而是一个元素的地址
//	printf("%d \n", len);
//	return 0;
//}
////递归
//int fac1(int n)
//{
//	int i = 0;
//	int ret = 1;
//	for (i = 1; i <= n; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}
//迭代
//int fac2(int n)
//{
//	if (n<=1)
//	{
//		return 1;
//	}
//	else
//	{
//		return n * fac2(n - 1);
//	}
//}
//int main()
//{
//	int n = 0;
//	int njc = 0;
//	scanf("%d", &n);
//	njc = fac2(n);
//	printf("%d\n", njc);
//}
//斐波那契数列
// 1 1 2 3 5 8 13 21 34 55.。。。
//描述第n个斐波那契数的时候
int fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n>2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	//TDD-测试驱动开发
	ret = fib(n);
	printf("%d\n", ret);
	return 0;
}
